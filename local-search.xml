<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>尝试在工程中使用 Go 泛型</title>
    <link href="/2023/08/14/try-to-use-go-generics-in-the-project/"/>
    <url>/2023/08/14/try-to-use-go-generics-in-the-project/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Go 从 1.18 版本开始支持泛型。一起看看怎么回事。</p><h1 id="从-max、min、sum-开始"><a href="#从-max、min、sum-开始" class="headerlink" title="从 max、min、sum 开始"></a>从 max、min、sum 开始</h1><p>找出一个 slice 的最大值、最小值和对一个 slice 求和是很常见的操作，通常我们需要对每种类型的 slice 的都单独实现一套函数操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MaxOfInts</span><span class="hljs-params">(values []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123; ... &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MaxOfFloats</span><span class="hljs-params">(values []<span class="hljs-keyword">float32</span>)</span> <span class="hljs-title">float32</span></span> &#123; ... &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MinOfInts</span><span class="hljs-params">(values []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123; ... &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MinOfFloats</span><span class="hljs-params">(values []<span class="hljs-keyword">float32</span>)</span> <span class="hljs-title">float32</span></span> &#123; ... &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SumInts</span><span class="hljs-params">(values []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123; ... &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SumFloats</span><span class="hljs-params">(values []<span class="hljs-keyword">float32</span>)</span> <span class="hljs-title">float32</span></span> &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>甚至里面的代码都是一样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SumInts</span><span class="hljs-params">(values []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">var</span> s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> values &#123;<br>        s += v<br>    &#125;<br>    <span class="hljs-keyword">return</span> s<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SumFloats</span><span class="hljs-params">(values []<span class="hljs-keyword">float32</span>)</span> <span class="hljs-title">float32</span></span> &#123;<br>    <span class="hljs-keyword">var</span> s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> values &#123;<br>        s += v<br>    &#125;<br>    <span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><p>本着 DRY（Don’t Repeat Yourself） 原则，有些人试图使用其他方法来解决这个问题，比如使用反射、代码生成器。反射复杂且性能一般，代码生成器又需要引入新的依赖。</p><p>在 Go 推出泛型后带来了新的方案，通过泛型，我们的求和函数支持处理 <code>[]int</code> 和 <code>[]float</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sum</span>[<span class="hljs-title">T</span> <span class="hljs-title">int</span> | <span class="hljs-title">float32</span>]<span class="hljs-params">(values []T)</span> <span class="hljs-title">T</span></span> &#123;<br>    <span class="hljs-keyword">var</span> s T<br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> values &#123;<br>        s += v<br>    &#125;<br>    <span class="hljs-keyword">return</span> s<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;sum ints: %d\n&quot;</span>, Sum([]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;)) <span class="hljs-comment">// sum ints: 15</span><br>    fmt.Printf(<span class="hljs-string">&quot;sum floats: %.2f\n&quot;</span>, Sum([]<span class="hljs-keyword">float32</span>&#123;<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">4.4</span>, <span class="hljs-number">5.5</span>&#125;)) <span class="hljs-comment">// sum floats: 16.50</span><br>&#125;<br></code></pre></td></tr></table></figure><p>仔细看泛型函数 Sum 的定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sum</span>[<span class="hljs-title">T</span> <span class="hljs-title">int</span> | <span class="hljs-title">float32</span>]<span class="hljs-params">(values []T)</span> <span class="hljs-title">T</span></span><br></code></pre></td></tr></table></figure><p>与一般的函数相比，在函数名的后面多了用方括号的这一段，称为类型参数（type parameters）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">[T <span class="hljs-keyword">int</span> | <span class="hljs-keyword">float32</span>]<br></code></pre></td></tr></table></figure><p>其中 <code>T</code> 为类型参数名称、<code>int | float32</code> 为类型参数约束，代表 <code>T</code> 允许是 <code>int</code> 或者 <code>float32</code>。</p><p>根据上面的例子，泛型版本 <code>Min</code>、<code>Max</code> 也手到擒来：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Min</span>[<span class="hljs-title">T</span> <span class="hljs-title">int</span> | <span class="hljs-title">float32</span>]<span class="hljs-params">(v T, values ...T)</span> <span class="hljs-title">T</span></span> &#123;<br>min := v<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> values &#123;<br><span class="hljs-keyword">if</span> values[i] &lt; min &#123;<br>min = values[i]<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> min<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Max</span>[<span class="hljs-title">T</span> <span class="hljs-title">int</span> | <span class="hljs-title">float32</span>]<span class="hljs-params">(v T, values ...T)</span> <span class="hljs-title">T</span></span> &#123;<br>max := v<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> values &#123;<br><span class="hljs-keyword">if</span> values[i] &gt; max &#123;<br>max = values[i]<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> max<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="类型参数约束"><a href="#类型参数约束" class="headerlink" title="类型参数约束"></a>类型参数约束</h1><p>类型约束定义了允许作为类型参数的一组类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Min</span>[<span class="hljs-title">T</span> <span class="hljs-title">int</span> | <span class="hljs-title">float32</span>]<span class="hljs-params">(v T, values ...T)</span> <span class="hljs-title">T</span></span><br></code></pre></td></tr></table></figure><p>比如这里 T 的约束，就是 <code>int | float32</code>，允许使用 <code>int</code> 或者 <code>float32</code> 作为类型参数。</p><p>假设我们需要让 <code>Min</code>、<code>Max</code>、<code>Sum</code> 这几个泛型函数传入支持 <code>string</code> 类型，我们可以这样做：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Min</span>[<span class="hljs-title">T</span> <span class="hljs-title">int</span> | <span class="hljs-title">float32</span> | <span class="hljs-title">string</span>]<span class="hljs-params">(v T, values ...T)</span> <span class="hljs-title">T</span></span> &#123; ... &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Max</span>[<span class="hljs-title">T</span> <span class="hljs-title">int</span> | <span class="hljs-title">float32</span> | <span class="hljs-title">string</span>]<span class="hljs-params">(v T, values ...T)</span> <span class="hljs-title">T</span></span> &#123; ... &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sum</span>[<span class="hljs-title">T</span> <span class="hljs-title">int</span> | <span class="hljs-title">float32</span> | <span class="hljs-title">string</span>]<span class="hljs-params">(values []T)</span> <span class="hljs-title">T</span></span> &#123; ... &#125;<br></code></pre></td></tr></table></figure><h2 id="使用-interface-定义一组类型"><a href="#使用-interface-定义一组类型" class="headerlink" title="使用 interface 定义一组类型"></a>使用 interface 定义一组类型</h2><p>我们修改了三个地方，使得这三个函数支持传入 <code>string</code> 类型，有没有更好的方法呢，答案是有的。</p><p>在过去 <code>interface</code> 用于定义一组方法，现在 <code>interface</code> 可以用于定义一组类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MyTypeSet <span class="hljs-keyword">interface</span> &#123;<br>    <span class="hljs-keyword">int</span> | <span class="hljs-keyword">float32</span> | <span class="hljs-keyword">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以将它用于类型约束：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Min</span>[<span class="hljs-title">T</span> <span class="hljs-title">MyTypeSet</span>]<span class="hljs-params">(v T, values ...T)</span> <span class="hljs-title">T</span></span> &#123; ... &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Max</span>[<span class="hljs-title">T</span> <span class="hljs-title">MyTypeSet</span>]<span class="hljs-params">(v T, values ...T)</span> <span class="hljs-title">T</span></span> &#123; ... &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sum</span>[<span class="hljs-title">T</span> <span class="hljs-title">MyTypeSet</span>]<span class="hljs-params">(values []T)</span> <span class="hljs-title">T</span></span> &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>如果后续我们还需要支持其他类型，就可以直接修改 <code>MyTypeSet</code> 即可。</p><p>另外 <code>[T int | float32 | string]</code> 其实是 <code>[T interface &#123; int | float32 | string &#125;]</code> 的语法糖，允许忽略 <code>interface&#123;&#125;</code> 使得结构紧凑。</p><h2 id="支持类型别名"><a href="#支持类型别名" class="headerlink" title="支持类型别名"></a>支持类型别名</h2><p>我们定义一个 <code>MyInt</code> 作为 <code>int</code> 的别名，尝试在 <code>Sum</code> 中使用它：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MyInt <span class="hljs-keyword">int</span><br><br>...<br><br><span class="hljs-keyword">var</span> data []MyInt = ...<br><span class="hljs-keyword">var</span> sumOfData = Sum(data)<br></code></pre></td></tr></table></figure><p>编译会提示如下错误：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">MyInt</span> does not implement MyTypeSet (possibly missing <span class="hljs-regexp">~ for</span> int in constraint MyTypeSet)<br></code></pre></td></tr></table></figure><p>这里提示我们可能在 <code>MyTypeSet</code> 约束中的 <code>int</code> 缺少 <code>~</code> 符号。修改约束，添加上 <code>~</code> 符号：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MyTypeSet <span class="hljs-keyword">interface</span> &#123;<br>    ~<span class="hljs-keyword">int</span> | <span class="hljs-keyword">float32</span> | <span class="hljs-keyword">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>再次编译，没有问题。那么 <code>~</code> 符号的作用是什么呢？我们看看官方文档的定义：</p><blockquote><p>~T notation stands for “all types that have the underlying type T”</p></blockquote><p>~T 符号表示“具有底层类型 T 的所有类型”。</p><p>那么 <code>~int</code> 就表示底层类型为 <code>int</code> 的所有类型，自然就可以处理 <code>MyInt</code>。</p><h2 id="常用的内建的类型约束"><a href="#常用的内建的类型约束" class="headerlink" title="常用的内建的类型约束"></a>常用的内建的类型约束</h2><ul><li>any：interface{} 的别名，等于没有约束</li><li>comparable：类型支持 <code>==</code> 和 <code>!=</code> 操作</li></ul><p>另外 <code>golang.org/x/exp</code> 定义了一组有用的类型约束，点击这里查看：<a href="https://pkg.go.dev/golang.org/x/exp/constraints">constraints</a></p><h1 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h1><h2 id="简单实现一个泛型-Set"><a href="#简单实现一个泛型-Set" class="headerlink" title="简单实现一个泛型 Set"></a>简单实现一个泛型 Set</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Set[T comparable] <span class="hljs-keyword">struct</span> &#123;<br>inner <span class="hljs-keyword">map</span>[T]<span class="hljs-keyword">struct</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewSet</span>[<span class="hljs-title">T</span> <span class="hljs-title">comparable</span>]<span class="hljs-params">(values ...T)</span> *<span class="hljs-title">Set</span>[<span class="hljs-title">T</span>]</span> &#123;<br>s := &amp;Set[T]&#123;<br>inner: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[T]<span class="hljs-keyword">struct</span>&#123;&#125;),<br>&#125;<br><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> values &#123;<br>s.Add(v)<br>&#125;<br><br><span class="hljs-keyword">return</span> s<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Set[T])</span> <span class="hljs-title">Add</span><span class="hljs-params">(v T)</span></span> &#123;<br>s.inner[v] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Set[T])</span> <span class="hljs-title">Remove</span><span class="hljs-params">(v T)</span></span> &#123;<br><span class="hljs-built_in">delete</span>(s.inner, v)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Set[T])</span> <span class="hljs-title">Contains</span><span class="hljs-params">(v T)</span> <span class="hljs-title">bool</span></span> &#123;<br>_, ok := s.inner[v]<br><span class="hljs-keyword">return</span> ok<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Set[T])</span> <span class="hljs-title">Len</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(s.inner)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Set[T])</span> <span class="hljs-title">Values</span><span class="hljs-params">()</span> []<span class="hljs-title">T</span></span> &#123;<br>values := <span class="hljs-built_in">make</span>([]T, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s.inner))<br><span class="hljs-keyword">for</span> v := <span class="hljs-keyword">range</span> s.inner &#123;<br>values = <span class="hljs-built_in">append</span>(values, v)<br>&#125;<br><br><span class="hljs-keyword">return</span> values<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用-gorm-查询的常用操作"><a href="#使用-gorm-查询的常用操作" class="headerlink" title="使用 gorm 查询的常用操作"></a>使用 gorm 查询的常用操作</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">QueryObjectsByCondsWithDb</span>[<span class="hljs-title">T</span> <span class="hljs-title">any</span>]<span class="hljs-params">(db *gorm.DB, conds ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">([]T, error)</span></span> &#123;<br><span class="hljs-keyword">var</span> objects []T<br>err := db.Find(&amp;objects, conds...).Error<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><br><span class="hljs-keyword">return</span> objects, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">QueryObjectMapByCondsWithDb</span>[<span class="hljs-title">K</span> <span class="hljs-title">comparable</span>, <span class="hljs-title">V</span> <span class="hljs-title">any</span>]<span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">db *gorm.DB,</span></span><br><span class="hljs-params"><span class="hljs-function">keyOf <span class="hljs-keyword">func</span>(v *V)</span> <span class="hljs-title">K</span>,</span><br>conds ...<span class="hljs-keyword">interface</span>&#123;&#125;,<br>) (<span class="hljs-keyword">map</span>[K]*V, error) &#123;<br><span class="hljs-keyword">var</span> objects []V<br>err := db.Find(&amp;objects, conds...).Error<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><br>objectMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[K]*V)<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> objects &#123;<br>v := &amp;objects[i]<br>objectMap[keyOf(v)] = v<br>&#125;<br><br><span class="hljs-keyword">return</span> objectMap, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="对性能的影响"><a href="#对性能的影响" class="headerlink" title="对性能的影响"></a>对性能的影响</h1><p>我们定义一个 IntSum 和一个 GenericSum：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MyTypeSet <span class="hljs-keyword">interface</span> &#123;<br>~<span class="hljs-keyword">int</span> | ~<span class="hljs-keyword">float32</span> | ~<span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenericSum</span>[<span class="hljs-title">T</span> <span class="hljs-title">MyTypeSet</span>]<span class="hljs-params">(values []T)</span> <span class="hljs-title">T</span></span> &#123;<br><span class="hljs-keyword">var</span> s T<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> values &#123;<br>s += v<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IntSum</span><span class="hljs-params">(values []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">var</span> s <span class="hljs-keyword">int</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> values &#123;<br>s += v<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><p>增加性能测试的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkGenericSum</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">var</span> data []<span class="hljs-keyword">int</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++ &#123;<br>data = <span class="hljs-built_in">append</span>(data, i)<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>_ = GenericSum(data)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkIntSum</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">var</span> data []<span class="hljs-keyword">int</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++ &#123;<br>data = <span class="hljs-built_in">append</span>(data, i)<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>_ = IntSum(data)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行测试，获取测试结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">goos</span>: darwin<br><span class="hljs-attribute">goarch</span>: amd<span class="hljs-number">64</span><br><span class="hljs-attribute">cpu</span>: Intel(R) Core(TM) i<span class="hljs-number">5</span>-<span class="hljs-number">7267</span>U CPU @ <span class="hljs-number">3</span>.<span class="hljs-number">10</span>GHz<br><span class="hljs-attribute">BenchmarkGenericSum</span>-<span class="hljs-number">4</span>   <span class="hljs-number">24427492</span>        <span class="hljs-number">50</span>.<span class="hljs-number">50</span> ns/op       <span class="hljs-number">0</span> B/op       <span class="hljs-number">0</span> allocs/op<br><span class="hljs-attribute">BenchmarkIntSum</span>-<span class="hljs-number">4</span>   <span class="hljs-number">31268010</span>        <span class="hljs-number">38</span>.<span class="hljs-number">90</span> ns/op       <span class="hljs-number">0</span> B/op       <span class="hljs-number">0</span> allocs/op<br></code></pre></td></tr></table></figure><p>可以看到泛型版本比普通版本慢了差不多 25%，这是为什么？</p><p>这和 Go 的泛型实现有关，具体可以参考这篇文章<a href="https://www.bmpi.dev/dev/deep-in-program-language/how-to-implement-generics">编程语言是如何实现泛型的</a>。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://go.dev/doc/tutorial/generics">Tutorial: Getting started with generics</a></li><li><a href="https://go.dev/blog/comparable">All your comparable types</a></li><li><a href="https://www.bmpi.dev/dev/deep-in-program-language/how-to-implement-generics">编程语言是如何实现泛型的</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>Generics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust 中变量的类型和可变性</title>
    <link href="/2022/06/14/type-and-mutability-of-variable-in-rust/"/>
    <url>/2022/06/14/type-and-mutability-of-variable-in-rust/</url>
    
    <content type="html"><![CDATA[<p>初学 Rust 的时候，容易将可变引用类型和自身可变性弄混，下面以几个例子来说明其中的区别。</p><p>下面代码中的 <code>r1</code>、<code>r2</code> 和 <code>r3</code> 有啥区别？</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> string1 = <span class="hljs-built_in">String</span>::from(<span class="hljs-string">&quot;hello&quot;</span>);<br><br><span class="hljs-keyword">let</span> r1 = &amp;<span class="hljs-keyword">mut</span> string1;<br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> r2 = &amp;string1;<br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> r3 = &amp;<span class="hljs-keyword">mut</span> string1;<br></code></pre></td></tr></table></figure><p>咋一看好像都差不多，实际上有类型和自身可变性的区别。</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>这里增加一个获取类型的函数，并降每个类型打印出来:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">type_of</span></span>&lt;T&gt;(_: &amp;T) -&gt; &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-built_in">str</span> &#123;<br>    std::any::type_name::&lt;T&gt;()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> string1 = <span class="hljs-built_in">String</span>::from(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> r1 = &amp;<span class="hljs-keyword">mut</span> string1;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;type of r1: &#123;&#125;&quot;</span>, type_of(&amp;r1));<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> r2 = &amp;string1;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;type of r2: &#123;&#125;&quot;</span>, type_of(&amp;r2));<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> r3 = &amp;<span class="hljs-keyword">mut</span> string1;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;type of r3: &#123;&#125;&quot;</span>, type_of(&amp;r3));<br>&#125;<br></code></pre></td></tr></table></figure><p>运行得到结果：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">of</span></span> r1: &amp;<span class="hljs-keyword">mut</span> alloc::string::<span class="hljs-built_in">String</span><br><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">of</span></span> r2: &amp;alloc::string::<span class="hljs-built_in">String</span><br><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">of</span></span> r3: &amp;<span class="hljs-keyword">mut</span> alloc::string::<span class="hljs-built_in">String</span><br></code></pre></td></tr></table></figure><p>这里可以看到 <code>r1</code> 和 <code>r3</code> 的类型都是 <code>&amp;mut String</code> 而，<code>r2</code> 的类型为 <code>&amp;String</code>。</p><h2 id="可变性"><a href="#可变性" class="headerlink" title="可变性"></a>可变性</h2><p>在原本的基础上，我们再添加几行代码，目的是尝试给 <code>r1</code>、<code>r2</code>、<code>r3</code> 赋值。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> string2 = <span class="hljs-built_in">String</span>::from(<span class="hljs-string">&quot;world&quot;</span>);<br><br>r1 = &amp;<span class="hljs-keyword">mut</span> string2;<br>r2 = &amp;string2;<br>r3 = &amp;<span class="hljs-keyword">mut</span> string2;<br></code></pre></td></tr></table></figure><p>常识编译执行，将会得到下面的错误：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">error[E0384]: cannot assign twice to immutable variable `r1`<br>  --&gt; src/bin/type_and_self_mutability_of_var.rs:17:5<br>   |<span class="hljs-string"></span><br><span class="hljs-string">6  </span>|<span class="hljs-string">     let r1 = &amp;mut string1;</span><br><span class="hljs-string">   </span>|<span class="hljs-string">         --</span><br><span class="hljs-string">   </span>|<span class="hljs-string">         </span>|<br>   |<span class="hljs-string">         first assignment to `r1`</span><br><span class="hljs-string">   </span>|<span class="hljs-string">         help: consider making this binding mutable: `mut r1`</span><br><span class="hljs-string">...</span><br><span class="hljs-string">17 </span>|<span class="hljs-string">     r1 = &amp;mut string2;</span><br><span class="hljs-string">   </span>|<span class="hljs-string">     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable</span><br></code></pre></td></tr></table></figure><p>根据报错信息，我们得知不能修改不可变变量 <code>r1</code> 的值，虽然 <code>r1</code> 的类型是 <code>&amp;mut String</code>。<br>注释掉 <code>r1 = &amp;mut string2;</code> 后就能正常编译了。三个变量情况汇总成表格：</p><table><thead><tr><th align="center">变量</th><th align="center">类型</th><th align="center">是否可变</th></tr></thead><tbody><tr><td align="center">r1</td><td align="center"><code>&amp;mut String</code></td><td align="center">否</td></tr><tr><td align="center">r2</td><td align="center"><code>&amp;String</code></td><td align="center">是</td></tr><tr><td align="center">r3</td><td align="center"><code>&amp;mut String</code></td><td align="center">是</td></tr></tbody></table><p>可以通过 <code>mut</code> 关键字使得变量自身可变，比如上面代码中的：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> r2 = &amp;string1;<br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> r3 = &amp;<span class="hljs-keyword">mut</span> string1;<br></code></pre></td></tr></table></figure><p><code>mut</code> 关键字还能在函数声明参数地方和模式匹配的时候使用，比如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">foo</span></span>(<span class="hljs-keyword">mut</span> bar: <span class="hljs-built_in">String</span>) &#123;<br>    <span class="hljs-comment">// 可以在里面修改 bar</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>和</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-literal">Some</span>(<span class="hljs-keyword">mut</span> proxy_channel) = proxy_channel_rx.recv().<span class="hljs-keyword">await</span> &#123;<br>    <span class="hljs-comment">// 修改 proxy_channel</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>类型为 <code>&amp;mut T</code> 不代表可以修改自身</li><li>使用 <code>mut</code> 关键字使变量自身可变</li></ul>]]></content>
    
    
    <categories>
      
      <category>Rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go - for range 的陷阱</title>
    <link href="/2021/11/18/pitfall-in-go-for-range/"/>
    <url>/2021/11/18/pitfall-in-go-for-range/</url>
    
    <content type="html"><![CDATA[<p>Go 的 <code>for range</code> 里的<strong>循环变量是共享的</strong>，这可能会引起一些问题，以下面的例子为例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Item <span class="hljs-keyword">struct</span> &#123;<br>ID     <span class="hljs-keyword">int64</span><br>Name   <span class="hljs-keyword">string</span><br>Amount <span class="hljs-keyword">int</span><br>&#125;<br><br>items := []Item&#123;<br>    &#123;<br>        ID: <span class="hljs-number">1</span>,<br>        Name: <span class="hljs-string">&quot;mushroom&quot;</span>,<br>        Amount: <span class="hljs-number">2</span>,<br>    &#125;,<br>    &#123;<br>        ID: <span class="hljs-number">2</span>,<br>        Name: <span class="hljs-string">&quot;apple&quot;</span>,<br>        Amount: <span class="hljs-number">5</span>,<br>    &#125;,<br>    &#123;<br>        ID: <span class="hljs-number">3</span>,<br>        Name: <span class="hljs-string">&quot;ore&quot;</span>,<br>        Amount: <span class="hljs-number">1</span>,<br>    &#125;,<br>&#125;<br><br>itemMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int64</span>]*Item)<br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> items &#123;<br>    itemMap[item.ID] = &amp;item<br>&#125;<br><br><span class="hljs-keyword">for</span> id, item := <span class="hljs-keyword">range</span> itemMap &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;id: %d item: %#v\n&quot;</span>, id, *item)<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码大致的意思是基于 <code>items</code> 创建一个 <code>id</code> 到 <code>*Item</code> 的映射，执行后结果为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>: <span class="hljs-number">1</span> item: main.Item&#123;ID:<span class="hljs-number">3</span>, Name:<span class="hljs-string">&quot;ore&quot;</span>, Amount:<span class="hljs-number">1</span>&#125;<br><span class="hljs-attribute">id</span>: <span class="hljs-number">2</span> item: main.Item&#123;ID:<span class="hljs-number">3</span>, Name:<span class="hljs-string">&quot;ore&quot;</span>, Amount:<span class="hljs-number">1</span>&#125;<br><span class="hljs-attribute">id</span>: <span class="hljs-number">3</span> item: main.Item&#123;ID:<span class="hljs-number">3</span>, Name:<span class="hljs-string">&quot;ore&quot;</span>, Amount:<span class="hljs-number">1</span>&#125;<br></code></pre></td></tr></table></figure><p>可以看到结果数据和预期不符，主要的原因就是因为<strong>循环变量是共享的</strong>，我们可以打印循环变量的地址来验证：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> items &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;item)<br>&#125;<br></code></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0</span>xc<span class="hljs-number">000124000</span><br><span class="hljs-number">0</span>xc<span class="hljs-number">000124000</span><br><span class="hljs-number">0</span>xc<span class="hljs-number">000124000</span><br></code></pre></td></tr></table></figure><p>可以看到 <code>item</code> 的地址一直是 <code>0xc000124000</code>，故可以明白为什么上面的 <code>map</code> 的结果不符合预期。</p><p>要避免这种情况，只需要记住：<strong>用 for range 在遍历的时候，避免取循环变量的地址作为结果，除非你知道自己在干什么</strong></p><p>上面的需求可以通过另一种形式取值来达成：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">itemMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int64</span>]*Item)<br><span class="hljs-keyword">for</span> offset := <span class="hljs-keyword">range</span> items &#123;<br>    itemMap[items[offset].ID] = &amp;items[offset]<br>&#125;<br><br><span class="hljs-keyword">for</span> id, item := <span class="hljs-keyword">range</span> itemMap &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;id: %d item: %#v\n&quot;</span>, id, *item)<br>&#125;<br></code></pre></td></tr></table></figure><p>最终结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>: <span class="hljs-number">1</span> item: main.Item&#123;ID:<span class="hljs-number">1</span>, Name:<span class="hljs-string">&quot;mushroom&quot;</span>, Amount:<span class="hljs-number">2</span>&#125;<br><span class="hljs-attribute">id</span>: <span class="hljs-number">2</span> item: main.Item&#123;ID:<span class="hljs-number">2</span>, Name:<span class="hljs-string">&quot;apple&quot;</span>, Amount:<span class="hljs-number">5</span>&#125;<br><span class="hljs-attribute">id</span>: <span class="hljs-number">3</span> item: main.Item&#123;ID:<span class="hljs-number">3</span>, Name:<span class="hljs-string">&quot;ore&quot;</span>, Amount:<span class="hljs-number">1</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于 Hexo 和 Github Pages 服务搭建个人博客实践</title>
    <link href="/2021/07/05/build-personal-blog-base-on-hexo-and-github-pages/"/>
    <url>/2021/07/05/build-personal-blog-base-on-hexo-and-github-pages/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-和-Github-Pages-是什么？"><a href="#Hexo-和-Github-Pages-是什么？" class="headerlink" title="Hexo 和 Github Pages 是什么？"></a>Hexo 和 Github Pages 是什么？</h2><p>Hexo 是什么？</p><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>Github Pages 是什么？</p><blockquote><p>GitHub Pages is designed to host your personal, organization, or project pages from a GitHub repository.</p></blockquote><p>Pages 是设计来托管 Github 仓库里面页面的服务。</p><p>而我们要做的事情就是使用 Hexo 生成个人博客的页面，然后再利用 Github Pages 服务来托管。</p><h2 id="使用-Hexo-生成个人博客页面"><a href="#使用-Hexo-生成个人博客页面" class="headerlink" title="使用 Hexo 生成个人博客页面"></a>使用 Hexo 生成个人博客页面</h2><p>通过 npm 安装 ：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>详细的安装教学可以看这里：<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p><p>安装完毕后，初始化博客文件夹：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo init 3vilive-blog<br><span class="hljs-built_in">cd</span> 3vilive-blog<br>npm install<br></code></pre></td></tr></table></figure><p>初始化完毕后，可以看到有这些文件和文件夹：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">➜ ls<br>_config<span class="hljs-selector-class">.landscape</span><span class="hljs-selector-class">.yml</span> node_modules          package<span class="hljs-selector-class">.json</span>          source                yarn<span class="hljs-selector-class">.lock</span><br>_config<span class="hljs-selector-class">.yml</span>           package-lock<span class="hljs-selector-class">.json</span>     scaffolds             themes<br></code></pre></td></tr></table></figure><p>我们主要关注这几项：</p><ul><li><code>_config.yml</code> 是博客的配置</li><li><code>scaffolds</code> 是模板文件夹，新建文章的时候会使用里面的模板</li><li><code>source</code> 资源文件夹</li><li><code>themes</code> 主题文件夹</li></ul><p>接着开始编辑博客配置（<code>_config.yml</code>），首先编辑博客的基本信息 (Site)：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">3vilive&#x27;s</span> <span class="hljs-string">blog</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;good luck have fun&#x27;</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">3vilive</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;Asia/ShangHai&#x27;</span><br></code></pre></td></tr></table></figure><p>接着设置 URL 这一栏：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://3vilive.github.io</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></code></pre></td></tr></table></figure><p>我们要使用 Github Pages，直接根据注释说明修改。</p><p>另外就是 <code>pretty_urls.trailing_index</code> 和 <code>pretty_urls.trailing_html</code> 我都设置为 <code>false</code>，因为不想在 URL 上看到 <code>html</code> 后缀。</p><p>为了管理方便，将 <code>new_post_name</code> 修改为为 <code>:year-:month-:day-:title.md </code> 和 <code>post_asset_folder</code> 为 <code>true</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:year-:month-:day-:title.md</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span> <br></code></pre></td></tr></table></figure><p>这样每次创建新文章的时候，文件名字都会带上时间信息，并且会自动创建一个相对应的资源文件夹。</p><p>其他配置先不做修改，使用默认的值就行。</p><p>至此，博客的基本配置已经完成，我们可以运行命令在本地预览效果：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➜ hexo <span class="hljs-keyword">server</span><br><span class="hljs-keyword">INFO</span>  Validating config<br><span class="hljs-keyword">INFO</span>  <span class="hljs-keyword">Start</span> processing<br><span class="hljs-keyword">INFO</span>  Hexo <span class="hljs-keyword">is</span> running at http://localhost:<span class="hljs-number">4000</span> . Press Ctrl+C <span class="hljs-keyword">to</span> stop.<br></code></pre></td></tr></table></figure><p>打开 <a href="http://localhost:4000/">http://localhost:4000</a> 即可预览效果。</p><h2 id="部署到-Github-Pages-上"><a href="#部署到-Github-Pages-上" class="headerlink" title="部署到 Github Pages 上"></a>部署到 Github Pages 上</h2><p>首先在 Github 上创建一个仓库，这里我创建了 <code>https://github.com/3vilive/3vilive.github.io</code>。</p><p><code>hexo-deployer-git</code> 是 <code>Hexo</code> 的一个部署插件，我们安装 <code>hexo-deployer-git</code> 后就可以用 <code>Git</code> 来部署了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>编辑配置文件 (<code>_config.yml</code>)，添加部署信息：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br>deploy:<br>  type: <span class="hljs-string">&#x27;git&#x27;</span><br>  repo: https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/3vilive/</span><span class="hljs-number">3</span>vilive.github.io.git<br>  branch: gh-pages<br></code></pre></td></tr></table></figure><p>执行部署命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo deploy</span><br></code></pre></td></tr></table></figure><p>看到最后输出 <code>INFO  Deploy done: git</code> 的时候，说明部署完成了，这时候可以打开仓库主页，看看文件是否已经在仓库里面。 </p><p>点开 Settings -&gt; Pages 页面，如果展示信息为 <code>Your site is published at https://3vilive.github.io/</code> 代表发布成功：</p><p><img src="/2021/07/05/build-personal-blog-base-on-hexo-and-github-pages/github-pages.png"></p><p>说明已经发布成功了，打开 <a href="https://3vilive.github.io/">https://3vilive.github.io</a> 验证一下。</p><p><img src="/2021/07/05/build-personal-blog-base-on-hexo-and-github-pages/blog-home.png"></p><h2 id="开始写作和更新"><a href="#开始写作和更新" class="headerlink" title="开始写作和更新"></a>开始写作和更新</h2><p>使用 hexo new 命令创建新的文章，hexo new 的用法：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>这里我创建了一篇文章《基于 Hexo 和 Github Pages 服务搭建个人博客实践》:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">➜ hexo <span class="hljs-keyword">new</span> post <span class="hljs-string">&quot;build personal blog base on hexo and github pages&quot;</span><br>INFO  Validating config<br>INFO  Created: ~<span class="hljs-regexp">/dev/</span><span class="hljs-number">3</span>vilive-blog<span class="hljs-regexp">/source/</span>_posts/<span class="hljs-number">2021</span>-<span class="hljs-number">07</span>-<span class="hljs-number">05</span>-build-personal-blog-base-on-hexo-and-github-pages.md<br></code></pre></td></tr></table></figure><p>打开对应的 <code>markdown</code> 文件就可以开始写作了，这里是 <code>~/dev/3vilive-blog/source/_posts/2021-07-05-build-personal-blog-base-on-hexo-and-github-pages.md</code>.</p><p>在写作期间，可以通过 <code>hexo server</code> 来预览最终效果。</p><p>写作完毕后，通过 <code>hexo generate</code> 和 <code>hexo deploy</code> 命令，就可以把文章发布啦。</p><h2 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h2><p>默认的主题有点简陋，这里我找了一个主题还不错：</p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>直接跟着里面的教程安装，最终效果如下：</p><p><img src="/2021/07/05/build-personal-blog-base-on-hexo-and-github-pages/use-theme-1.png"></p><p><img src="/2021/07/05/build-personal-blog-base-on-hexo-and-github-pages/use-theme-2.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Github Pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
